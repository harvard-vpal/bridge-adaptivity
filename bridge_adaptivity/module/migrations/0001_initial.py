# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-09-22 10:54


from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bridge_lti', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('name', models.CharField(max_length=255)),
                ('tags', models.CharField(help_text=b'Provide your tags separated by a comma.', max_length=255)),
                ('atype', models.CharField(choices=[(b'G', 'generic'), (b'A', 'pre-assessment'), (b'Z', 'post-assessment')], default=b'G', help_text=b"Choose 'pre/post-assessment' activity type to pin Activity to the start or the end of the Collection.", max_length=1, verbose_name=b'type')),
                ('difficulty', models.FloatField(default=b'0.5', help_text=b'Provide float number in the range 0.0 - 1.0', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('points', models.FloatField(blank=True, default=1)),
                ('source_launch_url', models.URLField(max_length=255, null=True)),
                ('source_name', models.CharField(blank=True, max_length=255, null=True)),
                ('source_context_id', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ('atype', 'order'),
                'verbose_name_plural': 'Activities',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('threshold', models.PositiveIntegerField(blank=True, default=0, help_text=b"Grade policy: 'Q'")),
                ('metadata', models.CharField(blank=True, max_length=255, null=True)),
                ('strict_forward', models.BooleanField(default=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, null=True)),
                ('log_type', models.CharField(choices=[(b'O', b'Opened'), (b'S', b'Submitted'), (b'A', b'Admin')], max_length=32)),
                ('answer', models.BooleanField(default=False, verbose_name=b'Is answer correct?')),
                ('attempt', models.PositiveIntegerField(default=0)),
                ('action', models.CharField(blank=True, choices=[(b'AC', b'Activity created'), (b'AU', b'Activity updated'), (b'AD', b'Activity deleted'), (b'CC', b'Collection created'), (b'CU', b'Collection updated')], max_length=2, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={})),
            ],
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('lis_result_sourcedid', models.CharField(max_length=255, null=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='module.Collection')),
                ('lti_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bridge_lti.LtiUser')),
                ('outcome_service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='bridge_lti.OutcomeService')),
            ],
        ),
        migrations.CreateModel(
            name='SequenceItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(default=1)),
                ('score', models.FloatField(blank=True, help_text=b"Grade policy: 'p' (problem's current score).", null=True)),
                ('activity', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='module.Activity')),
                ('sequence', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='items', to='module.Sequence')),
            ],
            options={
                'ordering': ['sequence', 'position'],
                'verbose_name': 'Sequence Item',
                'verbose_name_plural': 'Sequence Items',
            },
        ),
        migrations.AddField(
            model_name='log',
            name='sequence_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='module.SequenceItem'),
        ),
        migrations.AddField(
            model_name='activity',
            name='collection',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='module.Collection'),
        ),
        migrations.AddField(
            model_name='activity',
            name='lti_consumer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='bridge_lti.LtiConsumer'),
        ),
        migrations.AlterUniqueTogether(
            name='sequence',
            unique_together=set([('lti_user', 'collection'), ('lis_result_sourcedid', 'outcome_service')]),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together=set([('owner', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='activity',
            unique_together=set([('source_launch_url', 'collection')]),
        ),
    ]
