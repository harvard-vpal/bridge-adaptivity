# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-03-16 15:56


import common.mixins.models
from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bridge_lti', '0002_auto_20180316_1556'),
        ('module', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CollectionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('atime', models.DateTimeField(auto_now_add=True)),
                ('slug', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
            bases=(common.mixins.models.HasLinkedSequenceMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('slug', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Engine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('engine', models.CharField(choices=[(b'engine_vpal', b'vpal'), (b'engine_mock', b'mock')], default=b'engine_mock', max_length=100)),
                ('engine_name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('host', models.URLField(blank=True, null=True)),
                ('token', models.CharField(blank=True, max_length=255, null=True)),
                ('lti_parameters', models.TextField(blank=True, default=b'', help_text='LTI parameters to sent to the engine, use comma separated string')),
                ('is_default', models.BooleanField(default=False, help_text='If checked Engine will be used as the default!')),
            ],
            bases=(common.mixins.models.ModelFieldIsDefaultMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GradingPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('public_name', models.CharField(max_length=255)),
                ('threshold', models.PositiveIntegerField(blank=True, default=0, help_text=b"Grade policy: 'Q'")),
                ('is_default', models.BooleanField(default=False)),
                ('engine', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='module.Engine')),
            ],
            bases=(common.mixins.models.ModelFieldIsDefaultMixin, models.Model),
        ),
        migrations.RemoveField(
            model_name='collection',
            name='threshold',
        ),
        migrations.AddField(
            model_name='activity',
            name='stype',
            field=models.CharField(blank=True, help_text=b'(problem, video, html, etc.)', max_length=25, null=True, verbose_name=b'Type of the activity'),
        ),
        migrations.AddField(
            model_name='collection',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name='sequence',
            name='metadata',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default={}),
        ),
        migrations.AddField(
            model_name='sequenceitem',
            name='is_problem',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='activity',
            name='tags',
            field=models.CharField(blank=True, help_text=b'Provide your tags separated by a comma.', max_length=255, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='engine',
            unique_together=set([('host', 'token')]),
        ),
        migrations.AddField(
            model_name='collectiongroup',
            name='collections',
            field=models.ManyToManyField(blank=True, related_name='collection_groups', to='module.Collection'),
        ),
        migrations.AddField(
            model_name='collectiongroup',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='course_groups', to='module.Course'),
        ),
        migrations.AddField(
            model_name='collectiongroup',
            name='engine',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='module.Engine'),
        ),
        migrations.AddField(
            model_name='collectiongroup',
            name='grading_policy',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='module.GradingPolicy'),
        ),
        migrations.AddField(
            model_name='collectiongroup',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sequence',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='module.CollectionGroup'),
        ),
        migrations.AlterUniqueTogether(
            name='sequence',
            unique_together=set([('lis_result_sourcedid', 'outcome_service'), ('lti_user', 'collection', 'group')]),
        ),
    ]
