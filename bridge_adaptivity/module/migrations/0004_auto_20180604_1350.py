# Generated by Django 2.0.5 on 2018-06-04 13:50

import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('bridge_lti', '0003_auto_20180604_1350'),
        ('module', '0003_auto_20180530_0853'),
    ]

    operations = [
        migrations.AddField(
            model_name='sequence',
            name='suffix',
            field=models.CharField(default='', max_length=15),
        ),
        migrations.AlterField(
            model_name='activity',
            name='atype',
            field=models.CharField(choices=[('G', 'generic'), ('A', 'pre-assessment'), ('Z', 'post-assessment')], default='G', help_text="Choose 'pre/post-assessment' activity type to pin Activity to the start or the end of the Collection.", max_length=1, verbose_name='type'),
        ),
        migrations.AlterField(
            model_name='activity',
            name='difficulty',
            field=models.FloatField(default='0.5', help_text='Provide float number in the range 0.0 - 1.0', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AlterField(
            model_name='activity',
            name='repetition',
            field=models.PositiveIntegerField(default=1, help_text='The number of possible repetition of the Activity in the sequence.'),
        ),
        migrations.AlterField(
            model_name='activity',
            name='stype',
            field=models.CharField(blank=True, help_text='(problem, video, html, etc.)', max_length=25, null=True, verbose_name='Type of the activity'),
        ),
        migrations.AlterField(
            model_name='activity',
            name='tags',
            field=models.CharField(blank=True, help_text='Provide your tags separated by a comma.', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='collectiongroup',
            name='slug',
            field=models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True),
        ),
        migrations.AlterField(
            model_name='engine',
            name='engine',
            field=models.CharField(choices=[('engine_vpal', 'vpal'), ('engine_mock', 'mock')], default='engine_mock', max_length=100),
        ),
        migrations.AlterField(
            model_name='engine',
            name='lti_parameters',
            field=models.TextField(blank=True, default='', help_text='LTI parameters to sent to the engine, use comma separated string'),
        ),
        migrations.AlterField(
            model_name='gradingpolicy',
            name='threshold',
            field=models.PositiveIntegerField(blank=True, default=0, help_text="Grade policy: 'Q'"),
        ),
        migrations.AlterField(
            model_name='log',
            name='action',
            field=models.CharField(blank=True, choices=[('AC', 'Activity created'), ('AU', 'Activity updated'), ('AD', 'Activity deleted'), ('CC', 'Collection created'), ('CU', 'Collection updated')], max_length=2, null=True),
        ),
        migrations.AlterField(
            model_name='log',
            name='answer',
            field=models.BooleanField(default=False, verbose_name='Is answer correct?'),
        ),
        migrations.AlterField(
            model_name='log',
            name='log_type',
            field=models.CharField(choices=[('O', 'Opened'), ('S', 'Submitted'), ('A', 'Admin')], max_length=32),
        ),
        migrations.AlterField(
            model_name='sequenceitem',
            name='score',
            field=models.FloatField(blank=True, help_text="Grade policy: 'p' (problem's current score).", null=True),
        ),
        migrations.AlterField(
            model_name='sequenceitem',
            name='suffix',
            field=models.CharField(default='', max_length=10),
        ),
        migrations.AlterUniqueTogether(
            name='sequence',
            unique_together={('lis_result_sourcedid', 'outcome_service'), ('lti_user', 'collection', 'group', 'suffix')},
        ),
    ]
